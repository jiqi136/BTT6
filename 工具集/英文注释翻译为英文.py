# -*- coding:utf-8


import os  # 本地操作


class 类一一英文注释翻译为英文:  # 调用 类的模具  self.模具一一查看变量输出文本值('变量名', self.测试打印, 8)
	def __init__(self):
		self.测试打印='ew'

		英文文档 = input("输入英文文档.\n按下 enter 确认键后继续:\n")

		self.英文文本内容列表 = self.模具一一读取与写入文件(英文文档, 操作类型="每行读取", 内容='', 写入类='a')
		"""操作类型="读取"  or    操作类型="每行读取"  
		操作类型="写入"  or   操作类型="格式写入"
		默认 内容=''
		默认 重写 'w'   or 追加 写入类='a' 
			"""
		翻译为中文的文档 = input("输入已经翻译为中文的文档.\n按下 enter 确认键后继续:\n")
		self.中文文本内容列表 = self.模具一一读取与写入文件(翻译为中文的文档, 操作类型="每行读取", 内容='', 写入类='a')

		self.模具一一清洗中文文档()
		self.模具一一清洗英文文档()
		已经翻译了的GO文本='E:\go学习文件\src\edp浏览器资料库\已经了的GO文本.go'
		self.模具一一读取与写入文件(已经翻译了的GO文本, 操作类型="写入", 内容=self.英文新文本, 写入类='w')

	def 模具一一清洗中文文档(self):
		self.中文注释行列表 = []
		for 中文文本内容 in self.中文文本内容列表:

			if "//" in 中文文本内容:
				self.中文注释行列表.append(中文文本内容)  # 列表追加


				#elif '")' in 中文文本内容:
				#中文文本内容 = '   //' + 中文文本内容 + '\n'

				self.中文注释行列表.append(中文文本内容)  # 列表追加
				self.模具一一查看变量输出文本值("中文文本内容", 中文文本内容, 8)

	def 模具一一清洗英文文档(self):
		self.英文新文本 = ""
		中文注释行数 = len(self.中文注释行列表)
		英文有文本注释行数 = 0

		for 英文文本内容 in self.英文文本内容列表:

			if len(self.中文注释行列表) !=0:

				if "//" in 英文文本内容:
					self.模具一一查看变量输出文本值("英文新文本行", 英文文本内容, 8)
					self.模具一一查看变量输出文本值("中文文本内容", self.中文注释行列表[0], 8)
					英文有文本注释行数=英文有文本注释行数+1

					英文文本内容 = 英文文本内容 + self.中文注释行列表[0]

				#elif '")' in 英文文本内容:
				#英文文本内容 = 英文文本内容 + self.中文注释行列表[0]

				del self.中文注释行列表[0]
			

                    
			self.英文新文本 = self.英文新文本 + 英文文本内容

		if 中文注释行数 == 英文有文本注释行数:  # break # 结束循环 continue # 跳过当前循环，继续进行下一轮循环
			self.模具一一查看变量输出文本值("注释行数相等", 中文注释行数)

		else:  # 否则
			self.模具一一查看变量输出文本值("注释行数不相等", '')
			self.模具一一查看变量输出文本值("中文注释行数", 中文注释行数)
			self.模具一一查看变量输出文本值("英文有文本注释行数", 英文有文本注释行数)
	def 模具一一示例(self):

		pass

	def 模具一一读取与写入文件(self, 文件路径, 操作类型, 内容, 写入类='w'):  # 内容='格式写入'  写入类='a'   追加
		pass
		"""self.模具一一读取与写入文件(文件路径, 操作类型="每行读取", 内容='', 写入类='w')  #
				操作类型="读取"  or    操作类型="每行读取"  
				操作类型="写入"  or   操作类型="格式写入"
				默认 内容=''
				默认 重写 'w'   or 追加 写入类='a' 
		"""
		文本内容列表 = ''
		if '读取' in 操作类型:
			if 操作类型 == '每行读取':
				try:  # 调用异常处理,应对易发生错误的位置 {}.format()#'代入 '{}'
					文本缓存 = open(文件路径, 'r', encoding='UTF-8')
					文本内容列表 = 文本缓存.readlines()  # read() #全部读取   readlines 每一行


				except UnicodeDecodeError as 异常原因:  # 异常处理

					self.模具一一查看变量输出文本值("{} 读取文本 ,异常原因".format(文件路径), 异常原因)

					文本缓存 = open(文件路径, 'r', encoding='gbk')
					文本内容列表 = 文本缓存.readlines()  # read() #全部读取   readlines 每一行


				else:  # 必须放在所有的except子句之后.这个子句将在try子句没有发生任何异常的时候执行.
					文本缓存.close()

			else:  # 否则
				try:  # 调用异常处理,应对易发生错误的位置 {}.format()#'代入 '{}'
					文本缓存 = open(文件路径, 'r', encoding='UTF-8')
					文本内容列表 = 文本缓存.read()  # read() #全部读取   readlines 每一行

				except UnicodeDecodeError as 异常原因:  # 异常处理

					self.模具一一查看变量输出文本值("读取文本 ,异常原因", 异常原因, 8)
					文本缓存 = open(文件路径, 'r', encoding='gbk')
					文本内容列表 = 文本缓存.readlines()  # read() #全部读取   readlines 每一行



				else:  # 必须放在所有的except子句之后.这个子句将在try子句没有发生任何异常的时候执行.
					文本缓存.close()



		elif '写入' in 操作类型:  # 其它条件.
			文件缓存 = open(文件路径, 写入类, encoding='UTF-8')  # 追加 a

			if 操作类型 == '格式写入':  # break # 结束循环 continue # 跳过当前循环,继续进行下一轮循环
				文件缓存.write(内容.content)  # read() #读取
			else:  # 否则
				文件缓存.write(内容)  # write 写入  read() #读取
			文件缓存.close()

			self.模具一一查看变量输出文本值("保存至文本", 文件路径, 8)

		return 文本内容列表  # 返回

	def 模具一一查看变量输出文本值(self, 变量名, 变量文本值, 测试输入=0):

		if 测试输入 == 0:
			print(变量名, ': ', 变量文本值)
		elif len(self.测试打印) != 0:
			print(变量名, ': ', 变量文本值)


if __name__ == '__main__':
	英文注释翻译为英文 = 类一一英文注释翻译为英文()
